#Don't remove This Line From Here. @Dev_Arora_0981 | @DevArora0981
#Github :- Devarora0981 | Devarora0987
from pyrogram import Client, filters
from pyrogram.types import *
from pymongo import MongoClient
import requests
import random
import os
import re
import asyncio
import time
from datetime import datetime

API_ID = os.environ.get("API_ID", None) 
API_HASH = os.environ.get("API_HASH", None) 
BOT_TOKEN = os.environ.get("BOT_TOKEN", None) 
MONGO_URL = os.environ.get("MONGO_URL", None)
BOT_USERNAME = os.environ.get("BOT_USERNAME") 
UPDATE_CHNL = os.environ.get("UPDATE_CHNL")
OWNER_ID = os.environ.get("OWNER_ID")
OWNER_USERNAME = os.environ.get("OWNER_USERNAME")
SUPPORT_GRP = os.environ.get("SUPPORT_GRP")
BOT_NAME = os.environ.get("BOT_NAME")
START_IMG1 = os.environ.get("START_IMG1")
START_IMG2 = os.environ.get("START_IMG2", None)
START_IMG3 = os.environ.get("START_IMG3", None)
START_IMG4 = os.environ.get("START_IMG4", None)
START_IMG5 = os.environ.get("START_IMG5", None)
START_IMG6 = os.environ.get("START_IMG6", None)
START_IMG7 = os.environ.get("START_IMG7", None)
START_IMG8 = os.environ.get("START_IMG8", None)
START_IMG9 = os.environ.get("START_IMG9", None)
START_IMG10 = os.environ.get("START_IMG10", None)
STKR = os.environ.get("STKR")
STKR1 = os.environ.get("STKR1", None)
STKR2 = os.environ.get("STKR2", None)
STKR3 = os.environ.get("STKR3", None)
STKR4 = os.environ.get("STKR4", None)
STKR5 = os.environ.get("STKR5", None)
STKR6 = os.environ.get("STKR6", None)
STKR7 = os.environ.get("STKR7", None)
STKR8 = os.environ.get("STKR8", None)
STKR9 = os.environ.get("STKR9", None)

bot = Client(
    "VickBot" ,
    api_id = API_ID,
    api_hash = API_HASH ,
    bot_token = BOT_TOKEN
)


async def is_admins(chat_id: int):
    return [
        member.user.id
        async for member in bot.iter_chat_members(
            chat_id, filter="administrators"
        )
    ]


PHOTO = [
    START_IMG1,
    START_IMG2,
    START_IMG3,
    START_IMG4,
    START_IMG5,
    START_IMG6,
    START_IMG7,
    START_IMG8,
    START_IMG9,
    START_IMG10,
]

EMOJIOS = [ 
      "üí£",
      "üí•",
      "ü™Ñ",
      "üß®",
      "‚ö°",
      "ü§°",
      "üëª",
      "üéÉ",
      "üé©",
      "üïä",
]
      
STICKER = [
      STKR,
      STKR1,
      STKR2,
      STKR3,
      STKR4,
      STKR5,
      STKR6,
      STKR7,
      STKR8,
      STKR9,
]
START = f"""
**‡πè  ú·¥á è, …™ ·¥Ä·¥ç [{BOT_NAME}]({START_IMG1})**
**‚ûª ·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …¥·¥Ö ·¥ç·¥ús…™·¥Ñ ô·¥è·¥õ**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‚ûª ·¥ús·¥Ä…¢·¥á /chatbot [·¥è…¥/·¥è“ì“ì]**
<b>||‡πè  ú…™·¥õ  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä  ú·¥á ü·¥ò.||</b>
"""
DEV_OP = [
    [
        InlineKeyboardButton(text="ü•Ä ·¥è·¥°…¥·¥á Ä ü•Ä", url=f"tg://settings"),
        InlineKeyboardButton(text="‚ú® Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url=f"https://t.me/{SUPPORT_GRP}"),
    ],
    [
        InlineKeyboardButton(
            text="üß∏ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è üß∏",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text="üöÄ  ú·¥á ü·¥ò & ·¥Ñ·¥ç·¥Ös üöÄ", callback_data="HELP"),
    ],
    [
        InlineKeyboardButton(text="‚ùÑÔ∏è s·¥è·¥ú Ä·¥Ñ·¥á ‚ùÑÔ∏è", callback_data="SOURCE"),
        InlineKeyboardButton(text="‚òÅÔ∏è ·¥Ä ô·¥è·¥ú·¥õ ‚òÅÔ∏è", callback_data="ABOUT"),
    ],
]
PNG_BTN = [
    [
         InlineKeyboardButton(
             text="üß∏ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á  ô·¥Ä ô è üß∏",
             url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
         ),
     ],
     [
         InlineKeyboardButton(text="‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", 
                              url=f"https://t.me/{SUPPORT_GRP}",
         ),
     ],
]
HELP_READ = f"""
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è Ä {BOT_NAME}**</u>
<u>**·¥Ä Ä·¥á …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥°!**</u>
**·¥Ä ü ü ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú:/**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
<b>||¬©Ô∏è @Dev_Arora_0981||</b>
"""
BACK = [
     [
           InlineKeyboardButton(text="‚ú®  ô·¥Ä·¥Ñ·¥ã ‚ú®", callback_data="BACK"),
     ],
]

HELP_BTN = [
     [
          InlineKeyboardButton(text="üéÑ ·¥ç·¥ús…™·¥Ñ üéÑ", callback_data="MUSIC"),
          InlineKeyboardButton(text="üê≥ ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ üê≥", callback_data="CHATBOT_CMD"),
     ],
     [
          InlineKeyboardButton(text="ü•Ä ·¥õ·¥è·¥è üs ü•Ä", callback_data="TOOLS_DATA"),
          InlineKeyboardButton(text="‚ú®  ô·¥Ä·¥Ñ·¥ã ‚ú®", callback_data="BACK"),
     ],
]

CHATBOT_ON = [
        [
            InlineKeyboardButton(text="·¥á…¥·¥Ä ô ü·¥á", callback_data=f"addchat"),
            InlineKeyboardButton(text="·¥Ö…™s·¥Ä ô ü·¥á", callback_data=f"rmchat"),
        ],
]
TOOLS_DATA_READ = f"""
<u>**·¥õ·¥è·¥è üs “ì·¥è Ä {BOT_NAME} ·¥Ä Ä·¥á:**</u>
**‚ûª ·¥ús·¥á `/repo` “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢ s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á!**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‚ûª ·¥ús·¥á `/ping` “ì·¥è Ä ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á ·¥ò…™…¥…¢ ·¥è“ì {BOT_NAME}**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
<b>||¬©Ô∏è @Dev_Arora_0981||</b>
"""

CHATBOT_READ = f"""
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös “ì·¥è Ä {BOT_NAME}**</u>
**‚ûª ·¥ús·¥á `/chatbot` ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**
**‡πè …¥·¥è·¥õ·¥á ‚ûª ·¥õ ú·¥á ·¥Ä ô·¥è·¥†·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö “ì·¥è Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥ò ·¥è…¥ ü è!!**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
<b>||¬©Ô∏è @Dev_Arora_0981||</b>
"""
CHATBOT_BACK = [
        [     
              InlineKeyboardButton(text="‚ú®  ô·¥Ä·¥Ñ·¥ã ‚ú®", callback_data="CHATBOT_BACK"),
              InlineKeyboardButton(text="‚ùÑÔ∏è ·¥Ñ ü·¥ès·¥á ‚ùÑÔ∏è", callback_data="CLOSEALL"),
        ],
]

ABOUT_BTN = [
      [
           InlineKeyboardButton(text="üéÑ s·¥ú·¥ò·¥ò·¥è Ä·¥õ üéÑ", url=f"https://t.me/{SUPPORT_GRP}"),  
           InlineKeyboardButton(text="üöÄ  ú·¥á ü·¥ò üöÄ", callback_data="HELP"),
      ],
      [    
           InlineKeyboardButton(text="üçæ ·¥è·¥°…¥·¥á Ä üçæ", url=f"https://t.me/{OWNER_USERNAME}"), 
           InlineKeyboardButton(text="‚ùÑÔ∏è s·¥è·¥ú Ä·¥Ñ·¥á ‚ùÑÔ∏è", callback_data="SOURCE"),
      ],
      [ 
           InlineKeyboardButton(text="üê≥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás üê≥", url=f"https://t.me/{UPDATE_CHNL}"),  
           InlineKeyboardButton(text="‚ú®  ô·¥Ä·¥Ñ·¥ã ‚ú®", callback_data="BACK"),
      ],
]

START_BUTN = [
      [
            InlineKeyboardButton(text="s·¥õ·¥Ä Ä·¥õ ·¥ç·¥á", url=f"https://t.me/{BOT_USERNAME}?start=start")
      ],
]
MUSIC_READ = f"""
**<u>‚ûª  ú·¥á è, …™ ·¥Ä·¥ç {BOT_NAME}</u>**
**‡πè ·¥Ä “ì·¥Äs·¥õ ·¥Ä…¥·¥Ö ·¥©·¥è·¥°·¥á Ä“ì·¥ú ü ·¥ç·¥ús…™·¥Ñ ·¥© ü·¥Ä è·¥á Ä  ô·¥è·¥õ “ì·¥è Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥© ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs.**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‡πè ·¥Ä ü ü ·¥è“ì ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ä Ä·¥á  ü…™s·¥õ·¥á·¥Ö …™…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥°.**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‡πè ·¥Ä ü ü ·¥è“ì ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú : /**
"""

MUSIC_BTN = [
      [    InlineKeyboardButton(text="·¥Ä·¥Ö·¥ç…™…¥s", callback_data="ADMINS"),
           InlineKeyboardButton(text="·¥Ä·¥ú·¥õ ú", callback_data="AUTH"),
           InlineKeyboardButton(text="·¥© ü·¥Ä è", callback_data="PLAY"),
      ],
      [
           InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", callback_data="OWNER"),
           InlineKeyboardButton(text="s·¥ú·¥Ö·¥è", callback_data="SUDO"),
           InlineKeyboardButton(text="·¥õ·¥è·¥è üs", callback_data="TOOLS"),
      ],
      [
           InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="BACK_HELP"),
           InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="CLOSEALL"),
      ],
]

HELP_PVT = [
     [
          InlineKeyboardButton(text=" ú·¥á ü·¥ò!", url=f"https://t.me/{BOT_USERNAME}?start=help"),
     ],
]

HELP_START = [
     [
            InlineKeyboardButton(text=" ú·¥á ü·¥ò", callback_data="HELP"),
            InlineKeyboardButton(text="·¥Ñ ü·¥ès·¥á", callback_data="CLOSEALL"),
     ],
]
MUSIC_BACK_BTN = [
           [
               InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="MUSIC_BACK"),
           ],
]
  
TOOLS_READ = """
<u>**s·¥è·¥ç·¥á ·¥ús·¥á“ì·¥ú ü ·¥õ·¥è·¥è üs :**</u>
‚ûª /ping
‡πè ·¥Ñ ú·¥á·¥Ñ·¥ã …™“ì  ô·¥è·¥õ …™s ·¥Ä ü…™·¥†·¥á ·¥è Ä ·¥Ö·¥á·¥Ä·¥Ö. […™“ì ·¥Ä ü…™·¥†·¥á s ú·¥è·¥°s  è·¥è·¥ú ·¥õ ú·¥á s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä.]
‚ûª /start 
‡πè s·¥õ·¥Ä Ä·¥õs ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª /help 
‡πè s ú·¥è·¥°s  è·¥è·¥ú ·¥õ ú·¥á  ú·¥á ü·¥© ·¥ç·¥á…¥·¥ú ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª /stats
‡πè s ú·¥è·¥°s ·¥õ ú·¥á s ès·¥õ·¥á·¥ç, ·¥Äss…™s·¥õ·¥Ä…¥·¥õ, ·¥ç·¥è…¥…¢·¥è ·¥Ä…¥·¥Ö s·¥õ·¥è Ä·¥Ä…¢·¥á s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª /sudolist 
‡πè s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì s·¥ú·¥Ö·¥è·¥á Äs.
**·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è·¥á Äs :**
‚ûª /speedtest 
‡πè ·¥Ñ ú·¥á·¥Ñ·¥ã·¥á Ä s·¥á Ä·¥†·¥á Ä s·¥©·¥á·¥á·¥Ö ·¥Ä…¥·¥Ö  ü·¥Ä·¥õ·¥á…¥·¥Ñ è ·¥Ä…¥·¥Ö ·¥©…™…¥…¢.
"""
ADMIN_READ= """
<u>**·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥ás·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös :**</u>
‚ûª /pause
‡πè ·¥©·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.
‚ûª /resume
‡πè  Ä·¥ás·¥ú·¥ç·¥á·¥Ö ·¥õ ú·¥á ·¥©·¥Ä·¥ús·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç.
‚ûª /skip ·¥è Ä /next
‡πè s·¥ã…™·¥© ·¥õ ú·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç.
‚ûª/end ·¥è Ä /stop
‡πè ·¥á…¥·¥Ö ·¥õ ú·¥á ·¥Ñ·¥ú Ä·¥á·¥á…¥·¥õ ·¥è…¥…¢·¥è…™…¥ s·¥õ Ä·¥á·¥Ä·¥ç."""

AUTH_READ= """
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥Ä·¥ú·¥õ ú/·¥ú…¥·¥Ä·¥ú·¥õ ú ·¥Ä…¥ è ·¥ús·¥á Ä :**</u>
**<u>·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ s·¥ã…™·¥©, ·¥©·¥Ä·¥ús·¥á,  Ä·¥ás·¥ú·¥ç·¥á ·¥Ä…¥·¥Ö ·¥á…¥·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs.</u>**
‚ûª /auth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä's ·¥ç·¥áss·¥Ä…¢·¥á] 
‡πè ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥ús·¥á Ä ·¥õ·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs  ü…™s·¥õ ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©.
‚ûª /unauth [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä's ·¥ç·¥áss·¥Ä…¢·¥á] 
‡πè  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥õ ú·¥á ·¥ús·¥á Ä “ì Ä·¥è·¥ç ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs  ü…™s·¥õ.
‚ûª /authusers 
‡πè s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs ·¥è“ì ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥©."""

PLAY_READ = """
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ·¥è ·¥© ü·¥Ä è s·¥è…¥…¢s :**</u>
‚ûª /play <s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á/ è·¥õ ·¥ú Ä ü>
‡πè s·¥õ·¥Ä Ä·¥õs ·¥© ü·¥Ä è…™…¥…¢ ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö s·¥è…¥…¢ ·¥è…¥ ·¥†·¥Ñ.
‚ûª /queue
‡πè s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì «´·¥ú·¥á·¥ú·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ãs …™…¥ ·¥õ ú·¥á «´·¥ú·¥á·¥ú·¥á.
‚ûª /lyrics [s·¥è…¥…¢]
‡πè s ú·¥è·¥°s  è·¥è·¥ú ·¥õ ú·¥á  ü è Ä…™·¥Ñs ·¥è“ì ·¥õ ú·¥á s·¥á·¥Ä Ä·¥Ñ ú·¥á·¥Ö s·¥è…¥…¢.
"""

OWNER_READ = """
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö  ô è ·¥è·¥°…¥·¥á Ä ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ :**</u>
‚ûª /chatlist
‡πè  ü…™s·¥õ ·¥Ä ü ü ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õs ·¥° ú·¥á Ä·¥á  ô·¥è·¥õ …™s ·¥© Ä·¥ás·¥á…¥·¥õ.
‚ûª /clean
‡πè ·¥Ñ ü·¥á·¥Ä…¥ ·¥Ä ü ü ·¥õ ú·¥á ·¥õ·¥á·¥ç·¥© ·¥Ö…™ Ä·¥á·¥Ñ·¥õ·¥è Ä…™·¥ás.
‚ûª /update 
‡πè “ì·¥á·¥õ·¥Ñ ú ·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás “ì Ä·¥è·¥ç ·¥õ ú·¥á  Ä·¥á·¥©·¥è.
‚ûª /maintenance on
‡πè ·¥á…¥·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª /maintenance off
‡πè ·¥Ö…™s·¥Ä ô ü·¥á ·¥õ ú·¥á ·¥ç·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á ·¥ç·¥è·¥Ö·¥á ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª/restart 
‡πè  Ä·¥ás·¥õ·¥Ä Ä·¥õs ·¥õ ú·¥á  ô·¥è·¥õ ·¥è…¥  è·¥è·¥ú Ä s·¥á Ä·¥†·¥á Ä.
"""

SUDO_READ = """
<u>**·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö  ô è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs :**</u>
‚ûª /activevc
‡πè s ú·¥è·¥°s ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õs ·¥è…¥  ô·¥è·¥õ's s·¥á Ä·¥†·¥á Ä.
‚ûª /gban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä]
‡πè …¢ ü·¥è ô·¥Ä ü ü è  ô·¥Ä…¥s ·¥Ä ·¥ús·¥á Ä …™…¥ ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs.
‚ûª /ungban [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä]
‡πè …¢ ü·¥è ô·¥Ä ü ü è ·¥ú…¥ ô·¥Ä…¥s ·¥õ ú·¥á …¢- ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä.
‚ûª /broadcast [·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á]
‡πè  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ's ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.
‚ûª /broadcast_pin [·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä  Ä·¥á·¥© ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á]
‡πè  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ's ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è ·¥Ä ü ü ·¥õ ú·¥á s·¥á Ä·¥†·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥©…™…¥'s ·¥õ ú·¥á  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.
‚ûª /joinassistant [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
‡πè ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.
‚ûª /leaveassistant [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
‡πè ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.
‚ûª /leavebot [·¥Ñ ú·¥Ä·¥õ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á/…™·¥Ö]
‡πè ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.
‚ûª .approve 
‡πè ·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥ás ·¥Ä ·¥ò·¥á Äs·¥è…¥ ·¥õ·¥è ·¥ò·¥ç ·¥Äss…™s·¥õ·¥Ä…¥·¥õ. [ Ä·¥á·¥ò ü è …™…¥ …¢ Ä·¥ò!]
‚ûª .disapprove
‡πè ·¥Ö…™s·¥Ä·¥ò·¥ò Ä·¥è·¥†·¥ás ·¥Ä ·¥ò·¥á Äs·¥è…¥ …¥·¥è·¥õ ·¥õ·¥è ·¥ò·¥ç ·¥Äss…™s·¥õ·¥Ä…¥·¥õ. [ Ä·¥á·¥ò ü è …™…¥ …¢ Ä·¥ò!]
‚ûª .bio
‡πè s·¥á·¥õ  ô…™·¥è ·¥è“ì ·¥Äss…™s·¥õ·¥Ä…¥·¥õ. [·¥õ·¥áx·¥õ!] 
‚ûª .pfp
‡πè s·¥á·¥õ ·¥ò“ì·¥ò ·¥è“ì ·¥Äss…™s·¥õ·¥Ä…¥·¥õ. [ Ä·¥á·¥ò ü è ·¥Ä ·¥ò ú·¥è·¥õ·¥è!]
"""
PNG_STKR = [
            "CAACAgQAAx0CVbWIYQACCn5jSs_9_zh3TuUVUPge8X1L_6zwJgACVwkAAs4OWVM-aeuZeNqefCoE",
            "CAACAgQAAx0CVbWIYQACCoJjStAFy05rsk_eH2R0KSjJrdjoHwACLgkAAtV18VMyeXG0H2zCbCoE",
            "CAACAgQAAx0CVbWIYQACCpRjStBqcb1RXqpAasxjSgn9FohXDQACgQkAAsdMWVP7QgifAAE6v-QqBA",
            "CAACAgQAAx0CVbWIYQACCpljStCDLeBN5K02NP-ZoJIYNgz70AAC3goAAtpz6VPNcJcCFW5ExioE",
]

SOURCE_READ = f"** ú·¥á è, ·¥õ ú·¥á s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥è“ì [{BOT_NAME}](https://t.me/{BOT_USERNAME}) …™s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥°.**\n**·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥ã ·¥õ ú·¥á  Ä·¥á·¥ò·¥è & …¢…™·¥†·¥á ·¥õ ú·¥á s·¥õ·¥Ä Ä ‚úØ**\n**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n** ú·¥á Ä·¥á …™s ·¥õ ú·¥á [s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á](https://github.com/Devarora-0981/Vick)**\n**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**…™“ì  è·¥è·¥ú “ì·¥Ä·¥Ñ·¥á ·¥Ä…¥ è ·¥ò Ä·¥è ô ü·¥á·¥ç ·¥õ ú·¥á…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ä·¥õ [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/{SUPPORT_GRP}).\n ||¬©Ô∏è @Dev_Arora_0981||**"

ABOUT_READ = f"""
**‚ûª [{BOT_NAME}](https://t.me/{BOT_USERNAME}) …™s ·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …¥·¥Ö ·¥ç·¥ús…™·¥Ñ ô·¥è·¥õ.**
**‚ûª [{BOT_NAME}](https://t.me/{BOT_USERNAME})  Ä·¥á·¥ò ü…™·¥ás ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä …¥·¥Ö ·¥ò ü·¥Ä è s·¥è…¥…¢s.**
**‚ûª  ú·¥á ü·¥òs  è·¥è·¥ú …™…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs.**
**‚ûª ·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ [·¥ò è·¥õ ú·¥è…¥](https://www.python.org) ·¥°…™·¥õ ú [·¥ç·¥è…¥…¢·¥è-·¥Ö ô](https://www.mongodb.com) ·¥Äs ·¥Ä ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á**
**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**
**‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ [{BOT_NAME}](https://t.me/{BOT_USERNAME})**
"""
@bot.on_message(filters.command(["start", "aistart", f"start@{BOT_USERNAME}"]))
async def restart(client, m: Message):
    if m.chat.type == "private":
        accha = await m.reply_text(
            text = random.choice(EMOJIOS),
        )
        await asyncio.sleep(1.3)
        await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®ÑÔ∏é —ï—ÇŒ±—è—ÇŒπ–∏g..__")
        await asyncio.sleep(0.2)
        await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®Ñ s—ÇŒ±—è—ÇŒπ–∏g.....__")
        await asyncio.sleep(0.2)
        await accha.edit("__·¥ÖŒπ–∏g ·¥ÖœÉ–∏g Í®ÑÔ∏é s—ÇŒ±—è—ÇŒπ–∏g..__")
        await asyncio.sleep(0.2)
        await accha.delete()
        umm = await m.reply_sticker(
            sticker = random.choice(STICKER),
        )
        await asyncio.sleep(2)
        await umm.delete()
        await m.reply_photo(
            photo = random.choice(PHOTO),
            caption=f"""**‡πè  ú·¥á è, …™ ·¥Ä·¥ç [{BOT_NAME}](t.me/{BOT_USERNAME})**\n**‚ûª ·¥Ä ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ …¥·¥Ö ·¥ç·¥ús…™·¥Ñ ô·¥è·¥õ.**\n**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n**‚ûª ·¥ús·¥Ä…¢·¥á /chatbot [·¥è…¥/·¥è“ì“ì]**\n<b>||‡πè  ú…™·¥õ  ú·¥á ü·¥ò  ô·¥ú·¥õ·¥õ·¥è…¥ “ì·¥è Ä  ú·¥á ü·¥ò||</b>""",
            reply_markup=InlineKeyboardMarkup(DEV_OP),
        )
    else:
        await m.reply_photo(
                      photo = random.choice(PHOTO),
                      caption = START,
                      reply_markup = InlineKeyboardMarkup(HELP_START),
   )

@bot.on_callback_query()
async def cb_handler(Client, query: CallbackQuery):
    vickdb = MongoClient(MONGO_URL)
    vick = vickdb["VickDb"]["Vick"]
    if query.data == "HELP":
        await query.message.edit_text(
                      text = HELP_READ,
                      reply_markup = InlineKeyboardMarkup(HELP_BTN),
                      disable_web_page_preview=True,
     )
    elif query.data == "BACK":
            await query.message.edit(
                  text = START,
                  reply_markup=InlineKeyboardMarkup(DEV_OP),
     )
    elif query.data == "SOURCE":
            await query.message.edit(
                   text = SOURCE_READ,
                   reply_markup = InlineKeyboardMarkup(BACK),
                   disable_web_page_preview = True,

     )
    elif query.data == "ABOUT":
            await query.message.edit(
                    text = ABOUT_READ,
                    reply_markup = InlineKeyboardMarkup(ABOUT_BTN),
                    disable_web_page_preview=True,
     )
    elif query.data == "MUSIC":
            await query.message.edit(
                    text = MUSIC_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BTN),
     )
    elif query.data == "CLOSEALL":
           await query.message.delete()
    elif query.data == "HELP_BACK":
            await query.message.edit(
                    text = MUSIC_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BTN),   
     )
    elif query.data == "ADMINS":
            await query.message.edit(
                    text = ADMIN_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data== "TOOLS_DATA":
            await query.message.edit(
                    text= TOOLS_DATA_READ,
                    reply_markup = InlineKeyboardMarkup(CHATBOT_BACK),
     )
    elif query.data == "MUSIC_BACK":
            await query.message.edit(
                    text = MUSIC_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BTN),
     )
    elif query.data == "BACK_HELP":
            await query.message.edit(
                    text = HELP_READ,
                    reply_markup = InlineKeyboardMarkup(HELP_BTN),
     )
    elif query.data == "AUTH":
            await query.message.edit(
                    text = AUTH_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data == "OWNER":
            await query.message.edit(
                    text = OWNER_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data == "PLAY":
            await query.message.edit(
                    text = PLAY_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data == "SUDO":
            await query.message.edit(
                    text = SUDO_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data == "TOOLS":
            await query.message.edit(
                    text = TOOLS_READ,
                    reply_markup = InlineKeyboardMarkup(MUSIC_BACK_BTN), 
     )
    elif query.data == "CHATBOT_CMD":
            await query.message.edit(
                    text = CHATBOT_READ,
                    reply_markup = InlineKeyboardMarkup(CHATBOT_BACK), 
     )
    elif query.data == "CHATBOT_BACK":
            await query.message.edit(
                    text = HELP_READ,
                    reply_markup = InlineKeyboardMarkup(HELP_BTN), 
     )
    elif query.data == "addchat":
        if query.from_user.id not in (await is_admins(query.message.chat.id)):
            return query.answer(
                "You don't have permissions to do this baby.",
                show_alert=True,
            )
        else:
            is_vick = vick.find_one({"chat_id": query.message.chat.id})
            if not is_vick:           
                await query.edit_message_text(f"**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥á…¥·¥Ä ô ü·¥á·¥Ö.**")
            if is_vick:
                vick.delete_one({"chat_id": query.message.chat.id})
                await query.edit_message_text(f"**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥á…¥·¥Ä ô ü·¥á·¥Ö  ô è** {query.from_user.mention}.")
    elif query.data == "rmchat":
        if query.from_user.id not in (await is_admins(query.message.chat.id)):
            return query.answer(
                "** è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥çs ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s  ô·¥Ä ô è!**",
                show_alert=True,
            )
        else:
            is_vick = vick.find_one({"chat_id": query.message.chat.id})
            if not is_vick:
                vick.insert_one({"chat_id": query.message.chat.id})
                await query.edit_message_text(f"**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö  ô è** {query.from_user.mention}.")
            if is_vick:
                await query.edit_message_text("**·¥Ñ ú·¥Ä·¥õ- ô·¥è·¥õ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.**")
                            
@bot.on_message(filters.command("repo"))
async def repo(client, message):
    await message.reply_text(
                   text= SOURCE_READ,
                   reply_markup = InlineKeyboardMarkup(BACK),
                   disable_web_page_preview = True,
      )
@bot.on_message(filters.command(["help", f"help@{BOT_USERNAME}"], prefixes=["+", ".", "/", "-", "?", "$"]))
async def restart(client, m: Message):
    if m.chat.type == "private":
        bkl = await m.reply_text(
                      text = HELP_READ,
                      reply_markup= InlineKeyboardMarkup(HELP_BTN),
        )
    else:
        await m.reply_photo(
                      photo= random.choice(PHOTO), 
                      caption = "**·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç “ì·¥è Ä  ú·¥á ü·¥ò!**",
                      reply_markup = InlineKeyboardMarkup(HELP_PVT),
       )
   
@bot.on_message(filters.command("ping", prefixes=["+", "/", "-", "?", "$", "&"]))
async def ping(client, message: Message):
        start = datetime.now()
        wtfbhemchomd = await message.reply_sticker(
                                      sticker = random.choice(PNG_STKR),
        t = "__œÅŒπ–∏gŒπ–∏g...__"
        txxt = await message.reply(t)
        await asyncio.sleep(0.25)
        await txxt.edit_text("__œÅŒπ–∏gŒπ–∏g.....__")
        await asyncio.sleep(0.25)
        await txxt.edit_text("__œÅŒπ–∏gŒπ–∏g...__")
        await asyncio.sleep(0.35)
        await txxt.delete()
        end = datetime.now()
        ms = (end-start).microseconds / 1000
        await message.reply_photo(
                             photo=random.choice(PHOTO),
                             caption=f"–Ωey –≤Œ±–≤—É!!\n**[{BOT_NAME}](t.me/{BOT_USERNAME})** Œπ—ï alŒπve ü•Ä Œ±nd worƒ∏Œπng “ìŒπne wŒπ—Ç–Ω a pŒπng o“ì\n‚û• `{ms}` ms\n\n<b>||–ºŒ±d—î œâŒπ—Ç–Ω ‚ù£Ô∏è –≤—É [·é†evüéã](https://t.me/Dev_Arora_0981)||</b>",
                             reply_markup=InlineKeyboardMarkup(PNG_BTN),
       )


@bot.on_message(
    filters.command(["chatbot", f"chatbot@{BOT_USERNAME}"])
    & ~filters.private)
async def chatonoff(client: Client, message: Message):
    if not message.from_user:
        return
    else:
        user = message.from_user.id
        chat_id = message.chat.id
        if user not in (await is_admins(chat_id)):
            return await message.reply_text(
                "** è·¥è·¥ú ·¥Ä Ä·¥á'…¥·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥.**"
            )
        else:
            await message.reply_text(
            text="¬ª <u>**·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á/·¥Ö…™s·¥Ä ô ü·¥á ·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ.**</u>",
            reply_markup=InlineKeyboardMarkup(CHATBOT_ON),
        )


@bot.on_message(
 (
        filters.text
        | filters.sticker
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.text})  
           k = chatai.find_one({"word": message.text})      
           if k:               
               for x in is_chat:
                   K.append(x['text'])          
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "sticker":
                   await message.reply_sticker(f"{hey}")
               if not Yo == "sticker":
                   await message.reply_text(f"{hey}")
   
   if message.reply_to_message:  
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})    
       getme = await bot.get_me()
       bot_id = getme.id                             
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                   
               await bot.send_chat_action(message.chat.id, "typing")
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:       
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "sticker":
                       await message.reply_sticker(f"{hey}")
                   if not Yo == "sticker":
                       await message.reply_text(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.sticker:
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "id": message.sticker.file_unique_id})
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.sticker.file_id, "check": "sticker", "id": message.sticker.file_unique_id})
           if message.text:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.text, "text": message.text})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.text, "text": message.text, "check": "none"})    
               

@bot.on_message(
 (
        filters.sticker
        | filters.text
    )
    & ~filters.private
    & ~filters.bot,
)
async def vickstickerai(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]   

   if not message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       if not is_vick:
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})      
           k = chatai.find_one({"word": message.text})      
           if k:           
               for x in is_chat:
                   K.append(x['text'])
               hey = random.choice(K)
               is_text = chatai.find_one({"text": hey})
               Yo = is_text['check']
               if Yo == "text":
                   await message.reply_text(f"{hey}")
               if not Yo == "text":
                   await message.reply_sticker(f"{hey}")
   
   if message.reply_to_message:
       vickdb = MongoClient(MONGO_URL)
       vick = vickdb["VickDb"]["Vick"] 
       is_vick = vick.find_one({"chat_id": message.chat.id})
       getme = await bot.get_me()
       bot_id = getme.id
       if message.reply_to_message.from_user.id == bot_id: 
           if not is_vick:                    
               await bot.send_chat_action(message.chat.id, "typing")
               K = []  
               is_chat = chatai.find({"word": message.text})
               k = chatai.find_one({"word": message.text})      
               if k:           
                   for x in is_chat:
                       K.append(x['text'])
                   hey = random.choice(K)
                   is_text = chatai.find_one({"text": hey})
                   Yo = is_text['check']
                   if Yo == "text":
                       await message.reply_text(f"{hey}")
                   if not Yo == "text":
                       await message.reply_sticker(f"{hey}")
       if not message.reply_to_message.from_user.id == bot_id:          
           if message.text:
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text})
               if not is_chat:
                   toggle.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.text, "check": "text"})
           if message.sticker:                 
               is_chat = chatai.find_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id})                 
               if not is_chat:
                   chatai.insert_one({"word": message.reply_to_message.sticker.file_unique_id, "text": message.sticker.file_id, "check": "none"})    
               


@bot.on_message(
    (
        filters.text
        | filters.sticker
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivate(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"]
   if not message.reply_to_message: 
       await bot.send_chat_action(message.chat.id, "typing")
       K = []  
       is_chat = chatai.find({"word": message.text})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "sticker":
           await message.reply_sticker(f"{hey}")
       if not Yo == "sticker":
           await message.reply_text(f"{hey}")
   if message.reply_to_message:            
       getme = await bot.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.text})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "sticker":
               await message.reply_sticker(f"{hey}")
           if not Yo == "sticker":
               await message.reply_text(f"{hey}")
       

@bot.on_message(
 (
        filters.sticker
        | filters.text
    )
    & filters.private
    & ~filters.bot,
)
async def vickprivatesticker(client: Client, message: Message):

   chatdb = MongoClient(MONGO_URL)
   chatai = chatdb["Word"]["WordDb"] 
   if not message.reply_to_message:
       await bot.send_chat_action(message.chat.id, "typing")
       K = []  
       is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
       for x in is_chat:
           K.append(x['text'])
       hey = random.choice(K)
       is_text = chatai.find_one({"text": hey})
       Yo = is_text['check']
       if Yo == "text":
           await message.reply_text(f"{hey}")
       if not Yo == "text":
           await message.reply_sticker(f"{hey}")
   if message.reply_to_message:            
       getme = await bot.get_me()
       bot_id = getme.id       
       if message.reply_to_message.from_user.id == bot_id:                    
           await bot.send_chat_action(message.chat.id, "typing")
           K = []  
           is_chat = chatai.find({"word": message.sticker.file_unique_id})                 
           for x in is_chat:
               K.append(x['text'])
           hey = random.choice(K)
           is_text = chatai.find_one({"text": hey})
           Yo = is_text['check']
           if Yo == "text":
               await message.reply_text(f"{hey}")
           if not Yo == "text":
               await message.reply_sticker(f"{hey}")

print(f"{BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á! …¥·¥è·¥° “ì·¥ú·¥Ñ·¥ã ·¥è“ì“ì! ·¥Ä…¥·¥Ö …¢·¥è ·¥õ·¥è @W·¥á_ Ä“ì Ä…™·¥á…¥·¥Ös  ô…™·¥õ·¥Ñ ú!!")      
bot.run()
